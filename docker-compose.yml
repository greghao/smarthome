version: "3.7"

########################### NETWORKS
networks:
  t2_proxy:
    external:
      name: t2_proxy
  default:
    driver: bridge

########################### SERVICES
services:
# All services / apps go below this line

# Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:livarot
    restart: always
    command: # CLI arguments
#      - --global.insecureSNI #For version 2.2.2 and newer
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.dashboard=true
#      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
#    networks:
#      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/appdata/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/appdata/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/appdata/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file" 

############################# UTILITIES

# Docker-DOH - DNS over HTTPS
  doh-server:
    image: satishweb/doh-server
    container_name: doh
    restart: always
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.doh-rtr.entrypoints=https"
      - "traefik.http.routers.doh-rtr.rule=Host(`doh.$DOMAINNAME`)"
      - "traefik.http.routers.doh-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.doh-rtr.middlewares=chain-no-auth@file" # No Authentication
      ## HTTP Services
      - "traefik.http.routers.doh-rtr.service=doh-svc"
      - "traefik.http.services.doh-svc.loadbalancer.server.port=8053"
    environment:
      DEBUG: "0"
      # Upstream DNS server: proto:host:port
      # We are using OpenDNS DNS servers as default,
      # Here is the list of addresses: https://use.opendns.com/
      UPSTREAM_DNS_SERVER: "udp:192.168.90.253:53" #Pi-Hole
#      UPSTREAM_DNS_SERVER: "udp:94.140.14.14:53" #AdGuard
      DOH_HTTP_PREFIX: "/getdnsrecord"
      DOH_SERVER_LISTEN: ":8053"
      DOH_SERVER_TIMEOUT: "10"
      DOH_SERVER_TRIES: "3"
      DOH_SERVER_VERBOSE: "true"

  # Pi-Hole with unbound integration
  pihole:
    container_name: pihole
    image: cbcrowe/pihole-unbound:latest
    hostname: $HOSTNAME
    domainname: $DOMAINNAME
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.253
    ports:
      - 8153:53/tcp
      - 8153:53/udp
      - 5335:5335/tcp # Uncomment to enable unbound access on local server
      - 5380:80/tcp # Admin access
      # - 22/tcp # Uncomment to enable SSH
    environment:
      ServerIP: $SERVER_IP
      TZ: $TZ
      WEBPASSWORD: $PIHOLE_PASSWORD
#      REV_SERVER: ${REV_SERVER}
#      REV_SERVER_TARGET: ${REV_SERVER_TARGET}
#      REV_SERVER_DOMAIN: ${REV_SERVER_DOMAIN}
#      REV_SERVER_CIDR: ${REV_SERVER_CIDR}
      DNS1: 127.0.0.1#5335 # Hardcoded to our Unbound server
      DNS2: 127.0.0.1#5335 # Hardcoded to our Unbound server
      DNSSEC: "true" # Enable DNSSEC
    volumes:
      - $DOCKERDIR/appdata/pihole/etc-pihole:/etc/pihole:rw
      - $DOCKERDIR/appdata/pihole/etc-dmsmasq.d:/etc/dnsmasq.d:rw
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.pihole-rtr.entrypoints=https"
      - "traefik.http.routers.pihole-rtr.rule=Host(`pihole.$DOMAINNAME`)"
      - "traefik.http.routers.pihole-rtr.tls=true"
      - "traefik.http.routers.pihole-rtr.tls.certresolver=dns-cloudflare"
      ## Middlewares
      - "traefik.http.routers.pihole-rtr.middlewares=middlewares-basic-auth@file"
#      - "traefik.http.routers.pihole-rtr.middlewares=chain-no-auth@file" # No Authentication
#      - "traefik.http.routers.pihole-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
#      - "traefik.http.routers.pihole-rtr.middlewares=chain-oauth@file,add-admin" # Google OAuth 2.0
      - "traefik.http.middlewares.add-admin.addPrefix.prefix=/admin"
      ## HTTP Services
      - "traefik.http.routers.pihole-rtr.service=pihole-svc"
      - "traefik.http.services.pihole-svc.loadbalancer.server.port=80"

#  # Adguard Home (Pi-Hole alternative)
#  adguard:
#    container_name: adguard
#    image: adguard/adguardhome:latest
#    networks:
#      - t2_proxy
#    labels:
#      - "traefik.enable=true"
#      ## HTTP Routers
#      - "traefik.http.routers.adguard-rtr.entrypoints=https"
#      - "traefik.http.routers.adguard-rtr.rule=Host(`adguard.$DOMAINNAME`)"
#      - "traefik.http.routers.adguard-rtr.tls=true"
#      ## Middlewares
##      - "traefik.http.routers.adguard-rtr.middlewares=middlewares-basic-auth@file"
#      - "traefik.http.routers.adguard-rtr.middlewares=chain-no-auth@file" # No Authentication
#      ## HTTP Services
#      - "traefik.http.routers.adguard-rtr.service=adguard-svc"
#      - "traefik.http.services.adguard-svc.loadbalancer.server.port=80"      
#    restart: unless-stopped
#    ports:
#      - '53:53/tcp'
#      - '53:53/udp'
#      - '8043:443/tcp'
#      - '853:853/tcp'
#      - '784:784/udp'
##      - '8030:3000/tcp'
#      - '8080:80/tcp'
#    volumes:
#       - $DOCKERDIR/appdata/adguard/workdir:/opt/adguardhome/work
#       - $DOCKERDIR/appdata/adguard/confdir:/opt/adguardhome/conf
#    cap_add:
#      - NET_ADMIN

